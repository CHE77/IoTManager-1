{
  "menuSection": "executive_devices",
  "configItem": [
    {
      "global": 0,
      "name": "OpenThermSlave",
      "type": "Reading",
      "subtype": "OpenThermSlave",
      "id": "otslave",
      "widget": "",
      "page": "Boiler",
      "descr": "Котёл",
      "int": 60,
      "value": "...",
      "RX_pin": 13,
      "TX_pin": 15,
      "LogLevel": 0,
      "telegram": 1,
      "MemberID": 0,
      "confDhw":0,
      "minCH": 35,
      "maxCH": 85,
      "minDhw": 30,
      "maxDhw": 60,
      "idTboiler": "Tboiler",
      "idTret": "Tret",
      "idToutside": "Toutside",
      "idTDhw":"TDhw",
      "idStateCH":"StateCH",
      "idStateDHW":"StateDHW",
      "idStateFlame":"StateFlame",
      "idModLevel":"ModLevel",
      "idCmdCH":"CmdCH",
      "idCmdDHW":"CmdDHW",
      "idSetCH":"SetCH",
      "idSetDHW":"SetDHW",
      "idCtrlType":"CtrlType"
    }
  ],
  "about": {
    "authorName": "Mikhail Bubnov",
    "authorContact": "https://t.me/Mit4bmw",
    "authorGit": "https://github.com/Mit4el",
    "specialThanks": "",
    "moduleName": "OpenThermSlave",
    "moduleVersion": "0.1",
    "usedRam": {
      "esp32_4mb": 15,
      "esp8266_4mb": 15
    },
    "title": "OpenThermSlave",
    "moduleDesc": "Модуль для автоматизации электрического котла. Мозги котла с внешним протоколом opentherm",
    "propInfo": {
      "int": "Интервал отправки данных в MQTT и web интерфейс",
      "telegram": "1- Будет отправлять в телеграмм оповещения при ошибках котла и пропаже сигнала от котла, остальные необходимо реализовывать через сценарий",
      "MemberID": "SlaveMemberIDcode - код производителя котла, кем притворится котёл;) Менять в большинстве случаев не надо",
      "idPID":"ID модуля ПИД регулятора, для расчета модуляции и включения тэнов в зависимости от температуры теплоносителя, в модуле TCHSet будет уставка СО, создать TCHSet и указать его в модуле ПИД",
      "idTboiler": "ID датчика температуры подачи котла",
      "idTret": "ID датчика температуры обратки котла",
      "idToutside": "ID датчика уличной температуры",
      "rele1_Pwr": "Мощность тэна на первом реле, ID реле должно называться rele1",
      "rele2_Pwr": "Мощность тэна на первом реле, ID реле должно называться rele2, если нет, то 0 (ноль)",
      "rele3_Pwr": "Мощность тэна на первом реле, ID реле должно называться rele3, если нет, то 0 (ноль)",
      "Pupm": "1-есть реле насоса (ID реле должно называться relePump), 0-нет реле насоса, насос управляется котлом без нас",
      "minCH": "Граница установки температуры СО",
      "maxCH": "Граница установки температуры СО",
      "gistCH": "Гистерезис СО - нагрев СО включится если температура теплоносителя ниже уставки на указанные градусы (CHSet = 45гр, gistCH = 5гр, нагрев включится когда idTboiler = 40гр)",
      "idTdhw": "ID датчика температуры ГВС, например в датчик в БКН",
      "idReleDhw":"ID реле трехходового крана ГВС",
      "gistDhw": "Гистерезис ГВС - нагрев ГВС включится если температура воды ниже уставки на указанные градусы",
      "minDhw": "Граница установки температуры ГВС",
      "maxDhw": "Граница установки температуры ГВС"
    },
    "funcInfo": [
      {
        "name": "CHSet",
        "descr": "Установить целевую температуру СО",
        "params": [
          "тепмература СО (подачи) - bolier.CHSet(60)"
        ]
      },
      {
        "name": "CHEnable",
        "descr": "включить / выключить отопление",
        "params": [
          "bolier.CHEnable(1) - вкл, bolier.CHEnable(0) - выкл, "
        ]
      },
      {
        "name": "DHWSet",
        "descr": "Установить целевую температуру ГВС",
        "params": [
          "тепмература ГВС - dhw.DHWSet(40)"
        ]
      },
      {
        "name": "DHWEnable",
        "descr": "включить / выключить ГВС",
        "params": [
          "dhw.DHWEnable(1) - вкл, dhw.DHWEnable(0) - выкл, "
        ]
      }
    ]
  },
  "defActive": true,
  "usedLibs": {
    "esp32_4mb3f": [],
    "esp32*": [],
    "esp82*": []
  }
}